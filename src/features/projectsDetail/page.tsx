import Head from "next/head";
import { GetServerSideProps } from "next";
import gsap from "gsap";
import { CustomSplitText } from "src/libs/SplitText";

// components
import CursorProvider from "@components/cursor/CursorContext";
import MainHeader from "src/layouts/main/MainHeader";
import SectionFooter from "../home/components/SectionFooter";
import { PitStudio } from "pages/_app";

import LoadingOverlay from "@components/loading/LoadingOverlay";
import { ButtonWithIcon } from "@components/buttons";

import styles from "./ProjectDetail.module.scss";
import React, { useEffect, useRef } from "react";
import Parallax from "@components/parallax/Parallax";
import Baseline from "../home/components/Baseline";
import ButtonGhostTertiary from "@components/buttons/ButtonGhostTertiary";
import ElementWithCursor from "@components/cursor/ElementWithCursor";

/** MOCK DATA */
import products from "src/data/products.json";
import projects from "src/data/projects.json";
import anime from "animejs";
import { AnimeShow } from "src/libs/animation/show3d";

if (typeof window !== "undefined") {
  gsap.registerPlugin(CustomSplitText);
}

type SectionDescriptionType = { title: string; content: string };
type SectionScreenShotType = { src: string };
type SectionSplitShowType = { images: { src: string; alt: string }[] };
type SectionNextProjectType = {
  thumbnail: string;
  title: string;
  name: string;
};

type StructProjectContent = SectionSplitShowType | SectionScreenShotType | SectionDescriptionType;

type NextProjectInfo = {
  name: string;
  title: string;
  id: string;
  thumbnail: string;
};
type ProjectInfo = {
  name: string;
  title: string;
  brand: string;
  tags: string[];

  contents: Array<SectionSplitShowType | SectionScreenShotType | SectionDescriptionType>;

  nextProject: NextProjectInfo;
};

interface PageProps {
  project: ProjectInfo;
}

export default function ProjectDetail(props: PageProps) {
  const { title, brand, name, tags, contents, nextProject } = props.project;
  return (
    <CursorProvider>
      <Head>
        <title>Pit Studio</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <style jsx global>
        {`
          /* Hide scrollbar for Chrome, Safari and Opera */
          ::-webkit-scrollbar,
          #main::-webkit-scrollbar {
            display: none;
          }

          /* Hide scrollbar for IE, Edge and Firefox */
          * {
            -ms-overflow-style: none; /* IE and Edge */
            scrollbar-width: none; /* Firefox */
          }
          html,
          body {
            background-color: white;
          }
        `}
      </style>
      <LoadingOverlay />
      <main className={PitStudio.className}>
        <MainHeader animationDisable isBgTransparent isDark />
        <SectionCover {...{ title, brand, name, tags }} />
        {contents.map((props, id) => {
          if ("content" in props) return <SectionDescription key={id} {...props} />;
          else if ("src" in props)
            return <SectionScreenShot key={id} src={props.src} alt={"123"} />;
          return <SectionSplitShow key={id} {...props} />;
        })}
        <SectionNextProject {...nextProject} />
        <SectionFooter />
      </main>
    </CursorProvider>
  );
}

function SectionCover({ brand, name, tags, title }: Omit<ProjectInfo, "contents" | "nextProject">) {
  const titleRef = useRef<HTMLHeadingElement>(null);
  const brandRef = useRef<HTMLHeadingElement>(null);
  const tagsRef = useRef<HTMLUListElement>(null);
  useEffect(() => {
    if (!titleRef.current) return;
    const lines = new CustomSplitText(titleRef.current, {
      type: "lines",
    });

    const animeShow = new AnimeShow();
    animeShow.animetl.complete = () => {
      lines.revert();
    };

    const elements = [brandRef.current, ...lines.lines];
    elements.forEach((e, i) => {
      animeShow.add(e, { delay: i * 150 });
    });
    Array.from(tagsRef.current!.children!).forEach((e, i) => {
      animeShow.add(e, { delay: i * 150 });
    });
    animeShow.play();
    return () => {
      animeShow.destroy();
      lines.revert();
    };
  }, []);

  return (
    <section className={styles.cover}>
      <div className={styles.cover__content}>
        <div>
          <div className={styles.cover__brand}>
            <h1 ref={brandRef}>{name}</h1>
          </div>
          <div className={styles.cover__project}>
            <h2
              ref={titleRef}
              dangerouslySetInnerHTML={{ __html: title.replaceAll("\n", "<br/>") }}
            ></h2>
          </div>
        </div>
        <ul className={styles.cover__tags} ref={tagsRef}>
          {tags.map((tag) => {
            return <li key={tag}> {tag}</li>;
          })}
        </ul>
      </div>
      <div className={styles.cover__extra}>
        <ButtonWithIcon btnStyle="secondary_dark" border>
          See live
        </ButtonWithIcon>
        <div className={styles.cover__extra_brand}>
          <div>Project for</div>
          <div>
            <b>{brand}</b>
          </div>
        </div>
      </div>
    </section>
  );
}
function SectionScreenShot(props: JSX.IntrinsicElements["img"]) {
  return (
    <Parallax.Container className={styles.screenshot}>
      <div className={styles.screenshot__full}>
        <Parallax.Child
          as="img"
          src={props.src}
          alt={props.alt}
          translateY={["-30%", "30%"]}
          start={["top", "-100%"]}
          debug
        />
      </div>
    </Parallax.Container>
  );
}
function SectionSplitShow({ images }: SectionSplitShowType) {
  return (
    <section className={styles.splitshow}>
      <div className={styles.splitshow__container}>
        <div className={styles.splitshow__items}>
          <div className={styles.splitshow__column_one}>
            <div className={styles.splitshow__img_container}>
              <img src={images[0].src} alt={images[0].alt} />
            </div>
          </div>
        </div>
        {images.length > 2 && (
          <div className={styles.splitshow__items}>
            <div className={styles.splitshow__column_two}>
              <div className={styles.splitshow__img_container}>
                <img src={images[1].src} alt={images[1].alt} />
              </div>
            </div>
            <div className={styles.splitshow__column_two}>
              <div className={styles.splitshow__img_container}>
                <img src={images[2].src} alt={images[2].alt} />
              </div>
            </div>
          </div>
        )}
      </div>
    </section>
  );
}
function SectionDescription({ title, content }: SectionDescriptionType) {
  return (
    <section className={styles.description}>
      <div className={styles.description__container}>
        <div className={styles.description__title}>{title}</div>
        <p className={styles.description__content}>{content}</p>
      </div>
    </section>
  );
}
function SectionNextProject({ name: brand, thumbnail, title }: SectionNextProjectType) {
  return (
    <section className={styles.project}>
      <div className={styles.project__wrapper}>
        <div className={styles.project__container}>
          <div className={styles.project__next + " block md:hidden"}>
            <div>Next project</div>
          </div>
          <div className={styles.project__left}>
            <Baseline vertical position="left" className="hidden lg:block" />
            <div className={styles.project__next + " hidden md:block"}>Next project</div>
            <div className={styles.project__info}>
              <div className={styles.project__brand}>{brand}</div>
              <div className={styles.project__title}>{title}</div>
            </div>
            <Baseline vertical position="right" className="hidden lg:block" />
            <div className="hidden md:block absolute bottom-0 w-full left-0">
              <Baseline />
              <div className="2xl:py-8 lg:py-2 py-4 text-center">
                <ElementWithCursor
                  as={ButtonGhostTertiary}
                  backable
                  ghostTertiaryProps={{ className: "bg-primary-600" }}
                >
                  VIEW ALL CASES
                </ElementWithCursor>
              </div>
            </div>
          </div>
          <div className={styles.project__right}>
            <div className={styles.project__thumbnail}>
              <img
                src={thumbnail}
                alt={title}
                className="absolute inset-0 w-full h-full object-cover"
              />
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export const getServerSideProps: GetServerSideProps<PageProps> = async function (context) {
  const id = context.params?.id;
  if (typeof id !== "string") return { notFound: true };
  const index = projects.findIndex((p) => p.id == Number(id));
  if (index === -1) return { notFound: true };
  const project = projects[index];
  const nextProject = projects[index + 1] || projects[0];

  return {
    props: {
      project: {
        ...project,
        nextProject: {
          id: String(nextProject.id),
          name: nextProject.name,
          thumbnail: nextProject.src,
          title: nextProject.title,
        },
      },
    },
  };
};
